// Generated by gencpp from file opencv_deal/BboxL.msg
// DO NOT EDIT!


#ifndef OPENCV_DEAL_MESSAGE_BBOXL_H
#define OPENCV_DEAL_MESSAGE_BBOXL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace opencv_deal
{
template <class ContainerAllocator>
struct BboxL_
{
  typedef BboxL_<ContainerAllocator> Type;

  BboxL_()
    : minx(0.0)
    , miny(0.0)
    , maxx(0.0)
    , maxy(0.0)
    , navi(0.0)
    , centerx(0.0)
    , centery(0.0)  {
    }
  BboxL_(const ContainerAllocator& _alloc)
    : minx(0.0)
    , miny(0.0)
    , maxx(0.0)
    , maxy(0.0)
    , navi(0.0)
    , centerx(0.0)
    , centery(0.0)  {
  (void)_alloc;
    }



   typedef double _minx_type;
  _minx_type minx;

   typedef double _miny_type;
  _miny_type miny;

   typedef double _maxx_type;
  _maxx_type maxx;

   typedef double _maxy_type;
  _maxy_type maxy;

   typedef double _navi_type;
  _navi_type navi;

   typedef double _centerx_type;
  _centerx_type centerx;

   typedef double _centery_type;
  _centery_type centery;





  typedef boost::shared_ptr< ::opencv_deal::BboxL_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::opencv_deal::BboxL_<ContainerAllocator> const> ConstPtr;

}; // struct BboxL_

typedef ::opencv_deal::BboxL_<std::allocator<void> > BboxL;

typedef boost::shared_ptr< ::opencv_deal::BboxL > BboxLPtr;
typedef boost::shared_ptr< ::opencv_deal::BboxL const> BboxLConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::opencv_deal::BboxL_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::opencv_deal::BboxL_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::opencv_deal::BboxL_<ContainerAllocator1> & lhs, const ::opencv_deal::BboxL_<ContainerAllocator2> & rhs)
{
  return lhs.minx == rhs.minx &&
    lhs.miny == rhs.miny &&
    lhs.maxx == rhs.maxx &&
    lhs.maxy == rhs.maxy &&
    lhs.navi == rhs.navi &&
    lhs.centerx == rhs.centerx &&
    lhs.centery == rhs.centery;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::opencv_deal::BboxL_<ContainerAllocator1> & lhs, const ::opencv_deal::BboxL_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace opencv_deal

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::opencv_deal::BboxL_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::opencv_deal::BboxL_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opencv_deal::BboxL_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opencv_deal::BboxL_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opencv_deal::BboxL_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opencv_deal::BboxL_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::opencv_deal::BboxL_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a686645d937a65fb5a698081320dca73";
  }

  static const char* value(const ::opencv_deal::BboxL_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa686645d937a65fbULL;
  static const uint64_t static_value2 = 0x5a698081320dca73ULL;
};

template<class ContainerAllocator>
struct DataType< ::opencv_deal::BboxL_<ContainerAllocator> >
{
  static const char* value()
  {
    return "opencv_deal/BboxL";
  }

  static const char* value(const ::opencv_deal::BboxL_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::opencv_deal::BboxL_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 minx\n"
"float64 miny\n"
"float64 maxx\n"
"float64 maxy\n"
"float64 navi\n"
"float64 centerx\n"
"float64 centery\n"
;
  }

  static const char* value(const ::opencv_deal::BboxL_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::opencv_deal::BboxL_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.minx);
      stream.next(m.miny);
      stream.next(m.maxx);
      stream.next(m.maxy);
      stream.next(m.navi);
      stream.next(m.centerx);
      stream.next(m.centery);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BboxL_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::opencv_deal::BboxL_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::opencv_deal::BboxL_<ContainerAllocator>& v)
  {
    s << indent << "minx: ";
    Printer<double>::stream(s, indent + "  ", v.minx);
    s << indent << "miny: ";
    Printer<double>::stream(s, indent + "  ", v.miny);
    s << indent << "maxx: ";
    Printer<double>::stream(s, indent + "  ", v.maxx);
    s << indent << "maxy: ";
    Printer<double>::stream(s, indent + "  ", v.maxy);
    s << indent << "navi: ";
    Printer<double>::stream(s, indent + "  ", v.navi);
    s << indent << "centerx: ";
    Printer<double>::stream(s, indent + "  ", v.centerx);
    s << indent << "centery: ";
    Printer<double>::stream(s, indent + "  ", v.centery);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPENCV_DEAL_MESSAGE_BBOXL_H
